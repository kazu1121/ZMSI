@model ZmsiProjOne.ViewModels.HopfieldResultTwoViewModel

@{
    ViewData["Title"] = "Rezultat";
    string trybBadania = Model.HopfieldResultViewModel[0].HopfieldViewModel.HopfieldBaseData.ExaminationMode == ZmsiProjOne.ViewModels.ExaminationMode.Sync ? "synchroniczny" : "asynchroniczny";
}
<div class="row">
    <div class="col-md-12">

        @for (int i = 0; i < Model.HopfieldResultViewModel.Count; i++)
        {
            var matrixCounter = i + 1;

            <h2 style="text-align: center;">Macierz nr @matrixCounter</h2>
            <h3>Dane Wejściowe:</h3>

            <div class="form-group">
                <label class="control-label">Tryb @trybBadania</label>
            </div>

            <div class="form-group">
                <label asp-for="HopfieldResultViewModel[i].HopfieldViewModel.WeightMatrix" class="control-label"></label>

                <table>
                    @for (int column = 0; column < Model.HopfieldResultViewModel[i].HopfieldViewModel.WeightMatrix.Length; column++)
                    {
                        <tr>
                            @for (int row = 0; row < Model.HopfieldResultViewModel[i].HopfieldViewModel.WeightMatrix.Length; row++)
                            {
                                <td>@Html.EditorFor(x => Model.HopfieldResultViewModel[i].HopfieldViewModel.WeightMatrix[column][row], new { htmlAttributes = new { @disabled = "disabled" } })</td>

                            }
                        </tr>
                    }
                </table>
            </div>

            <div class="form-group">
                <label asp-for="HopfieldResultViewModel[i].HopfieldViewModel.IMatrix" class="control-label"></label>

                <table>
                    @for (int j = 0; j < Model.HopfieldResultViewModel[i].HopfieldViewModel.IMatrix.Length; j++)
                    {
                        <tr>
                            <td>@Html.EditorFor(x => Model.HopfieldResultViewModel[i].HopfieldViewModel.IMatrix[j], new { htmlAttributes = new { @disabled = "disabled" } })</td>
                        </tr>
                    }
                </table>
            </div>

            @if (Model.HopfieldResultViewModel[i].HopfieldViewModel.HopfieldBaseData.ExaminationMode == ZmsiProjOne.ViewModels.ExaminationMode.Async)
            {
                <div class="form-group">
                    <label asp-for="HopfieldResultViewModel[i].HopfieldViewModel.AsyncExaminingOrder" class="control-label"></label>

                    <table>
                        <tr>
                            @for (int j = 0; j < Model.HopfieldResultViewModel[j].HopfieldViewModel.AsyncExaminingOrder.Length; i++)
                            {
                                <td>@Html.EditorFor(x => Model.HopfieldResultViewModel[j].HopfieldViewModel.AsyncExaminingOrder[j], new { htmlAttributes = new { @disabled = "disabled" } })</td>
                            }
                        </tr>
                    </table>
                </div>
            }

            <h3>Wyniki:</h3>
            @for (int j = 0; j < Model.HopfieldResultViewModel[i].ResultNetwork.BadanePunkty.Count; j++)
            {
                var examinationCounter = j + 1;
                <div class="form-group">
                    <label class="control-label">Rozpoczęto badanie nr @examinationCounter</label>
                </div>

                <div class="form-group">
                    <label class="control-label">Badany wektor: @Model.HopfieldResultViewModel[i].ResultNetwork.BadanePunkty[j].BadanyPunktString</label>
                </div>

                for (int k = 0; k < Model.HopfieldResultViewModel[i].ResultNetwork.BadanePunkty[j].ListaKrorkow.Count; k++)
                {
                    <div class="form-group">
                        <label class="control-label">Krok: @Model.HopfieldResultViewModel[i].ResultNetwork.BadanePunkty[j].ListaKrorkow[k].Numer</label>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Potencjał wejściowy (U): @Model.HopfieldResultViewModel[i].ResultNetwork.BadanePunkty[j].ListaKrorkow[k].ObliczonyPotencjalWejsciowyString</label>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Potencjał wyjściowy (V): @Model.HopfieldResultViewModel[i].ResultNetwork.BadanePunkty[j].ListaKrorkow[k].PotencjalWyjsciowyString</label>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Energia: @Model.HopfieldResultViewModel[i].ResultNetwork.BadanePunkty[j].ListaKrorkow[k].Energia</label>
                    </div>
                }

                <div class="form-group" style="background-color: lawngreen">
                    <label class="control-label">Wniosek: @Model.HopfieldResultViewModel[i].ResultNetwork.BadanePunkty[j].Wniosek</label>
                </div>
            }

        }

        <h2 style="text-align: center;">Podsumowanie</h2>
        <table class="table table-striped">
            <tr>
                <td>Wektor</td>
                <td>Stały</td>
                <td>Zbieżny</td>
                <td>Tworzy cykl</td>
                <td>Wpada w cykl</td>
            </tr>
        @for (int j = 0; j < Model.PointSummaryViewModelList.Count; j++)
        {
            <tr>
                <td>@Model.PointSummaryViewModelList[j].PunktString</td>
                <td>@Model.PointSummaryViewModelList[j].IleStaly</td>
                <td>@Model.PointSummaryViewModelList[j].IleZbiezny</td>
                <td>@Model.PointSummaryViewModelList[j].IleTworzyCykl</td>
                <td>@Model.PointSummaryViewModelList[j].IleWpadaWCykl</td>
            </tr>
        }
        </table>
    </div>
</div>
